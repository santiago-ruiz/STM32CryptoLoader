
blinky1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000111c  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009228  08009228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800924c  0800924c  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800924c  0800924c  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800924c  0800924c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800924c  0800924c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009250  08009250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009254  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08009260  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08009260  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f97  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d63  00000000  00000000  00012fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d8  00000000  00000000  00013d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000350  00000000  00000000  00014108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015881  00000000  00000000  00014458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003b18  00000000  00000000  00029cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b596  00000000  00000000  0002d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d58  00000000  00000000  000a8e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	2000000c 	.word	0x2000000c
 8008128:	00000000 	.word	0x00000000
 800812c:	08009210 	.word	0x08009210

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000010 	.word	0x20000010
 8008148:	08009210 	.word	0x08009210

0800814c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, AP_START_SECTOR);
 8008150:	4909      	ldr	r1, [pc, #36]	; (8008178 <main+0x2c>)
 8008152:	2000      	movs	r0, #0
 8008154:	f000 f8b2 	bl	80082bc <NVIC_SetVectorTable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008158:	f000 f950 	bl	80083fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800815c:	f000 f810 	bl	8008180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008160:	f000 f854 	bl	800820c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8008164:	2064      	movs	r0, #100	; 0x64
 8008166:	f000 f9ab 	bl	80084c0 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800816a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800816e:	4803      	ldr	r0, [pc, #12]	; (800817c <main+0x30>)
 8008170:	f000 fc1e 	bl	80089b0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8008174:	e7f6      	b.n	8008164 <main+0x18>
 8008176:	bf00      	nop
 8008178:	08008000 	.word	0x08008000
 800817c:	40011000 	.word	0x40011000

08008180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b090      	sub	sp, #64	; 0x40
 8008184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008186:	f107 0318 	add.w	r3, r7, #24
 800818a:	2228      	movs	r2, #40	; 0x28
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f836 	bl	8009200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	609a      	str	r2, [r3, #8]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80081a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80081ac:	2300      	movs	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081b0:	2301      	movs	r3, #1
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80081b4:	2302      	movs	r3, #2
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80081b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80081be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80081c4:	f107 0318 	add.w	r3, r7, #24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fc0b 	bl	80089e4 <HAL_RCC_OscConfig>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80081d4:	f000 f888 	bl	80082e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081d8:	230f      	movs	r3, #15
 80081da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081dc:	2302      	movs	r3, #2
 80081de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80081e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	2102      	movs	r1, #2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fe76 	bl	8008ee4 <HAL_RCC_ClockConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80081fe:	f000 f873 	bl	80082e8 <Error_Handler>
  }
}
 8008202:	bf00      	nop
 8008204:	3740      	adds	r7, #64	; 0x40
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008212:	f107 0310 	add.w	r3, r7, #16
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	609a      	str	r2, [r3, #8]
 800821e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008220:	4b24      	ldr	r3, [pc, #144]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	4a23      	ldr	r2, [pc, #140]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008226:	f043 0310 	orr.w	r3, r3, #16
 800822a:	6193      	str	r3, [r2, #24]
 800822c:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800823e:	f043 0320 	orr.w	r3, r3, #32
 8008242:	6193      	str	r3, [r2, #24]
 8008244:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008250:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4a17      	ldr	r2, [pc, #92]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008256:	f043 0304 	orr.w	r3, r3, #4
 800825a:	6193      	str	r3, [r2, #24]
 800825c:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	607b      	str	r3, [r7, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008268:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	4a11      	ldr	r2, [pc, #68]	; (80082b4 <MX_GPIO_Init+0xa8>)
 800826e:	f043 0308 	orr.w	r3, r3, #8
 8008272:	6193      	str	r3, [r2, #24]
 8008274:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <MX_GPIO_Init+0xa8>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008280:	2200      	movs	r2, #0
 8008282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008286:	480c      	ldr	r0, [pc, #48]	; (80082b8 <MX_GPIO_Init+0xac>)
 8008288:	f000 fb7a 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800828c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008292:	2301      	movs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829a:	2302      	movs	r3, #2
 800829c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800829e:	f107 0310 	add.w	r3, r7, #16
 80082a2:	4619      	mov	r1, r3
 80082a4:	4804      	ldr	r0, [pc, #16]	; (80082b8 <MX_GPIO_Init+0xac>)
 80082a6:	f000 fa11 	bl	80086cc <HAL_GPIO_Init>

}
 80082aa:	bf00      	nop
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40011000 	.word	0x40011000

080082bc <NVIC_SetVectorTable>:

/* USER CODE BEGIN 4 */
void NVIC_SetVectorTable(unsigned long NVIC_VectTab, unsigned long Offset)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
	SCB->VTOR = NVIC_VectTab | (Offset & (unsigned int)0x1FFFFF80);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80082cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082d0:	4904      	ldr	r1, [pc, #16]	; (80082e4 <NVIC_SetVectorTable+0x28>)
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	608b      	str	r3, [r1, #8]
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	e000ed00 	.word	0xe000ed00

080082e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082ee:	e7fe      	b.n	80082ee <Error_Handler+0x6>

080082f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <HAL_MspInit+0x5c>)
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	4a14      	ldr	r2, [pc, #80]	; (800834c <HAL_MspInit+0x5c>)
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	6193      	str	r3, [r2, #24]
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <HAL_MspInit+0x5c>)
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	60bb      	str	r3, [r7, #8]
 800830c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <HAL_MspInit+0x5c>)
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	4a0e      	ldr	r2, [pc, #56]	; (800834c <HAL_MspInit+0x5c>)
 8008314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008318:	61d3      	str	r3, [r2, #28]
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <HAL_MspInit+0x5c>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008322:	607b      	str	r3, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <HAL_MspInit+0x60>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	4a04      	ldr	r2, [pc, #16]	; (8008350 <HAL_MspInit+0x60>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	40021000 	.word	0x40021000
 8008350:	40010000 	.word	0x40010000

08008354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008358:	e7fe      	b.n	8008358 <NMI_Handler+0x4>

0800835a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800835e:	e7fe      	b.n	800835e <HardFault_Handler+0x4>

08008360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008364:	e7fe      	b.n	8008364 <MemManage_Handler+0x4>

08008366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800836a:	e7fe      	b.n	800836a <BusFault_Handler+0x4>

0800836c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008370:	e7fe      	b.n	8008370 <UsageFault_Handler+0x4>

08008372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008372:	b480      	push	{r7}
 8008374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr

0800837e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800837e:	b480      	push	{r7}
 8008380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008382:	bf00      	nop
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr

0800838a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800838a:	b480      	push	{r7}
 800838c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800838e:	bf00      	nop
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800839a:	f000 f875 	bl	8008488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800839e:	bf00      	nop
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083a2:	b480      	push	{r7}
 80083a4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083a6:	bf00      	nop
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
	...

080083b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80083b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80083b2:	e003      	b.n	80083bc <LoopCopyDataInit>

080083b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80083b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80083b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80083ba:	3104      	adds	r1, #4

080083bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80083bc:	480a      	ldr	r0, [pc, #40]	; (80083e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80083c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80083c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80083c4:	d3f6      	bcc.n	80083b4 <CopyDataInit>
  ldr r2, =_sbss
 80083c6:	4a0a      	ldr	r2, [pc, #40]	; (80083f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80083c8:	e002      	b.n	80083d0 <LoopFillZerobss>

080083ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80083ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80083cc:	f842 3b04 	str.w	r3, [r2], #4

080083d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80083d0:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80083d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80083d4:	d3f9      	bcc.n	80083ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083d6:	f7ff ffe4 	bl	80083a2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083da:	f000 feed 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80083de:	f7ff feb5 	bl	800814c <main>
  bx lr
 80083e2:	4770      	bx	lr
  ldr r3, =_sidata
 80083e4:	08009254 	.word	0x08009254
  ldr r0, =_sdata
 80083e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80083ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80083f0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80083f4:	2000002c 	.word	0x2000002c

080083f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083f8:	e7fe      	b.n	80083f8 <ADC1_2_IRQHandler>
	...

080083fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008400:	4b08      	ldr	r3, [pc, #32]	; (8008424 <HAL_Init+0x28>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a07      	ldr	r2, [pc, #28]	; (8008424 <HAL_Init+0x28>)
 8008406:	f043 0310 	orr.w	r3, r3, #16
 800840a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800840c:	2003      	movs	r0, #3
 800840e:	f000 f929 	bl	8008664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008412:	2000      	movs	r0, #0
 8008414:	f000 f808 	bl	8008428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008418:	f7ff ff6a 	bl	80082f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40022000 	.word	0x40022000

08008428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008430:	4b12      	ldr	r3, [pc, #72]	; (800847c <HAL_InitTick+0x54>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <HAL_InitTick+0x58>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4619      	mov	r1, r3
 800843a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800843e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f933 	bl	80086b2 <HAL_SYSTICK_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e00e      	b.n	8008474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b0f      	cmp	r3, #15
 800845a:	d80a      	bhi.n	8008472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800845c:	2200      	movs	r2, #0
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008464:	f000 f909 	bl	800867a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008468:	4a06      	ldr	r2, [pc, #24]	; (8008484 <HAL_InitTick+0x5c>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e000      	b.n	8008474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000000 	.word	0x20000000
 8008480:	20000008 	.word	0x20000008
 8008484:	20000004 	.word	0x20000004

08008488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <HAL_IncTick+0x1c>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <HAL_IncTick+0x20>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4413      	add	r3, r2
 8008498:	4a03      	ldr	r2, [pc, #12]	; (80084a8 <HAL_IncTick+0x20>)
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr
 80084a4:	20000008 	.word	0x20000008
 80084a8:	20000028 	.word	0x20000028

080084ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  return uwTick;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <HAL_GetTick+0x10>)
 80084b2:	681b      	ldr	r3, [r3, #0]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	20000028 	.word	0x20000028

080084c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084c8:	f7ff fff0 	bl	80084ac <HAL_GetTick>
 80084cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084d8:	d005      	beq.n	80084e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <HAL_Delay+0x40>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084e6:	bf00      	nop
 80084e8:	f7ff ffe0 	bl	80084ac <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d8f7      	bhi.n	80084e8 <HAL_Delay+0x28>
  {
  }
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000008 	.word	0x20000008

08008504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <__NVIC_SetPriorityGrouping+0x44>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008520:	4013      	ands	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800852c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008536:	4a04      	ldr	r2, [pc, #16]	; (8008548 <__NVIC_SetPriorityGrouping+0x44>)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	60d3      	str	r3, [r2, #12]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	e000ed00 	.word	0xe000ed00

0800854c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <__NVIC_GetPriorityGrouping+0x18>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	f003 0307 	and.w	r3, r3, #7
}
 800855a:	4618      	mov	r0, r3
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008578:	2b00      	cmp	r3, #0
 800857a:	db0a      	blt.n	8008592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	490c      	ldr	r1, [pc, #48]	; (80085b4 <__NVIC_SetPriority+0x4c>)
 8008582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008586:	0112      	lsls	r2, r2, #4
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	440b      	add	r3, r1
 800858c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008590:	e00a      	b.n	80085a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	b2da      	uxtb	r2, r3
 8008596:	4908      	ldr	r1, [pc, #32]	; (80085b8 <__NVIC_SetPriority+0x50>)
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	3b04      	subs	r3, #4
 80085a0:	0112      	lsls	r2, r2, #4
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	440b      	add	r3, r1
 80085a6:	761a      	strb	r2, [r3, #24]
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	e000e100 	.word	0xe000e100
 80085b8:	e000ed00 	.word	0xe000ed00

080085bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085bc:	b480      	push	{r7}
 80085be:	b089      	sub	sp, #36	; 0x24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f1c3 0307 	rsb	r3, r3, #7
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	bf28      	it	cs
 80085da:	2304      	movcs	r3, #4
 80085dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	3304      	adds	r3, #4
 80085e2:	2b06      	cmp	r3, #6
 80085e4:	d902      	bls.n	80085ec <NVIC_EncodePriority+0x30>
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	3b03      	subs	r3, #3
 80085ea:	e000      	b.n	80085ee <NVIC_EncodePriority+0x32>
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	43da      	mvns	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	401a      	ands	r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	fa01 f303 	lsl.w	r3, r1, r3
 800860e:	43d9      	mvns	r1, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008614:	4313      	orrs	r3, r2
         );
}
 8008616:	4618      	mov	r0, r3
 8008618:	3724      	adds	r7, #36	; 0x24
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3b01      	subs	r3, #1
 800862c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008630:	d301      	bcc.n	8008636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008632:	2301      	movs	r3, #1
 8008634:	e00f      	b.n	8008656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008636:	4a0a      	ldr	r2, [pc, #40]	; (8008660 <SysTick_Config+0x40>)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3b01      	subs	r3, #1
 800863c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800863e:	210f      	movs	r1, #15
 8008640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008644:	f7ff ff90 	bl	8008568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <SysTick_Config+0x40>)
 800864a:	2200      	movs	r2, #0
 800864c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800864e:	4b04      	ldr	r3, [pc, #16]	; (8008660 <SysTick_Config+0x40>)
 8008650:	2207      	movs	r2, #7
 8008652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	e000e010 	.word	0xe000e010

08008664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ff49 	bl	8008504 <__NVIC_SetPriorityGrouping>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800867a:	b580      	push	{r7, lr}
 800867c:	b086      	sub	sp, #24
 800867e:	af00      	add	r7, sp, #0
 8008680:	4603      	mov	r3, r0
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800868c:	f7ff ff5e 	bl	800854c <__NVIC_GetPriorityGrouping>
 8008690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	f7ff ff90 	bl	80085bc <NVIC_EncodePriority>
 800869c:	4602      	mov	r2, r0
 800869e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff ff5f 	bl	8008568 <__NVIC_SetPriority>
}
 80086aa:	bf00      	nop
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff ffb0 	bl	8008620 <SysTick_Config>
 80086c0:	4603      	mov	r3, r0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b08b      	sub	sp, #44	; 0x2c
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086d6:	2300      	movs	r3, #0
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80086da:	2300      	movs	r3, #0
 80086dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086de:	e127      	b.n	8008930 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80086e0:	2201      	movs	r2, #1
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	4013      	ands	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	f040 8116 	bne.w	800892a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b12      	cmp	r3, #18
 8008704:	d034      	beq.n	8008770 <HAL_GPIO_Init+0xa4>
 8008706:	2b12      	cmp	r3, #18
 8008708:	d80d      	bhi.n	8008726 <HAL_GPIO_Init+0x5a>
 800870a:	2b02      	cmp	r3, #2
 800870c:	d02b      	beq.n	8008766 <HAL_GPIO_Init+0x9a>
 800870e:	2b02      	cmp	r3, #2
 8008710:	d804      	bhi.n	800871c <HAL_GPIO_Init+0x50>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d031      	beq.n	800877a <HAL_GPIO_Init+0xae>
 8008716:	2b01      	cmp	r3, #1
 8008718:	d01c      	beq.n	8008754 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800871a:	e048      	b.n	80087ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800871c:	2b03      	cmp	r3, #3
 800871e:	d043      	beq.n	80087a8 <HAL_GPIO_Init+0xdc>
 8008720:	2b11      	cmp	r3, #17
 8008722:	d01b      	beq.n	800875c <HAL_GPIO_Init+0x90>
          break;
 8008724:	e043      	b.n	80087ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008726:	4a89      	ldr	r2, [pc, #548]	; (800894c <HAL_GPIO_Init+0x280>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d026      	beq.n	800877a <HAL_GPIO_Init+0xae>
 800872c:	4a87      	ldr	r2, [pc, #540]	; (800894c <HAL_GPIO_Init+0x280>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d806      	bhi.n	8008740 <HAL_GPIO_Init+0x74>
 8008732:	4a87      	ldr	r2, [pc, #540]	; (8008950 <HAL_GPIO_Init+0x284>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d020      	beq.n	800877a <HAL_GPIO_Init+0xae>
 8008738:	4a86      	ldr	r2, [pc, #536]	; (8008954 <HAL_GPIO_Init+0x288>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01d      	beq.n	800877a <HAL_GPIO_Init+0xae>
          break;
 800873e:	e036      	b.n	80087ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008740:	4a85      	ldr	r2, [pc, #532]	; (8008958 <HAL_GPIO_Init+0x28c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d019      	beq.n	800877a <HAL_GPIO_Init+0xae>
 8008746:	4a85      	ldr	r2, [pc, #532]	; (800895c <HAL_GPIO_Init+0x290>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d016      	beq.n	800877a <HAL_GPIO_Init+0xae>
 800874c:	4a84      	ldr	r2, [pc, #528]	; (8008960 <HAL_GPIO_Init+0x294>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <HAL_GPIO_Init+0xae>
          break;
 8008752:	e02c      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	623b      	str	r3, [r7, #32]
          break;
 800875a:	e028      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	3304      	adds	r3, #4
 8008762:	623b      	str	r3, [r7, #32]
          break;
 8008764:	e023      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	3308      	adds	r3, #8
 800876c:	623b      	str	r3, [r7, #32]
          break;
 800876e:	e01e      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	330c      	adds	r3, #12
 8008776:	623b      	str	r3, [r7, #32]
          break;
 8008778:	e019      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008782:	2304      	movs	r3, #4
 8008784:	623b      	str	r3, [r7, #32]
          break;
 8008786:	e012      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d105      	bne.n	800879c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008790:	2308      	movs	r3, #8
 8008792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	611a      	str	r2, [r3, #16]
          break;
 800879a:	e008      	b.n	80087ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800879c:	2308      	movs	r3, #8
 800879e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	615a      	str	r2, [r3, #20]
          break;
 80087a6:	e002      	b.n	80087ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
          break;
 80087ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2bff      	cmp	r3, #255	; 0xff
 80087b2:	d801      	bhi.n	80087b8 <HAL_GPIO_Init+0xec>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	e001      	b.n	80087bc <HAL_GPIO_Init+0xf0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	d802      	bhi.n	80087ca <HAL_GPIO_Init+0xfe>
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	e002      	b.n	80087d0 <HAL_GPIO_Init+0x104>
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	3b08      	subs	r3, #8
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	210f      	movs	r1, #15
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	401a      	ands	r2, r3
 80087e2:	6a39      	ldr	r1, [r7, #32]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ea:	431a      	orrs	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8096 	beq.w	800892a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80087fe:	4b59      	ldr	r3, [pc, #356]	; (8008964 <HAL_GPIO_Init+0x298>)
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	4a58      	ldr	r2, [pc, #352]	; (8008964 <HAL_GPIO_Init+0x298>)
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	6193      	str	r3, [r2, #24]
 800880a:	4b56      	ldr	r3, [pc, #344]	; (8008964 <HAL_GPIO_Init+0x298>)
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	60bb      	str	r3, [r7, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008816:	4a54      	ldr	r2, [pc, #336]	; (8008968 <HAL_GPIO_Init+0x29c>)
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	089b      	lsrs	r3, r3, #2
 800881c:	3302      	adds	r3, #2
 800881e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008822:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	220f      	movs	r2, #15
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	43db      	mvns	r3, r3
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4013      	ands	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a4b      	ldr	r2, [pc, #300]	; (800896c <HAL_GPIO_Init+0x2a0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <HAL_GPIO_Init+0x19e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a4a      	ldr	r2, [pc, #296]	; (8008970 <HAL_GPIO_Init+0x2a4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00d      	beq.n	8008866 <HAL_GPIO_Init+0x19a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a49      	ldr	r2, [pc, #292]	; (8008974 <HAL_GPIO_Init+0x2a8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <HAL_GPIO_Init+0x196>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a48      	ldr	r2, [pc, #288]	; (8008978 <HAL_GPIO_Init+0x2ac>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d101      	bne.n	800885e <HAL_GPIO_Init+0x192>
 800885a:	2303      	movs	r3, #3
 800885c:	e006      	b.n	800886c <HAL_GPIO_Init+0x1a0>
 800885e:	2304      	movs	r3, #4
 8008860:	e004      	b.n	800886c <HAL_GPIO_Init+0x1a0>
 8008862:	2302      	movs	r3, #2
 8008864:	e002      	b.n	800886c <HAL_GPIO_Init+0x1a0>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <HAL_GPIO_Init+0x1a0>
 800886a:	2300      	movs	r3, #0
 800886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886e:	f002 0203 	and.w	r2, r2, #3
 8008872:	0092      	lsls	r2, r2, #2
 8008874:	4093      	lsls	r3, r2
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800887c:	493a      	ldr	r1, [pc, #232]	; (8008968 <HAL_GPIO_Init+0x29c>)
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	089b      	lsrs	r3, r3, #2
 8008882:	3302      	adds	r3, #2
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008896:	4b39      	ldr	r3, [pc, #228]	; (800897c <HAL_GPIO_Init+0x2b0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4938      	ldr	r1, [pc, #224]	; (800897c <HAL_GPIO_Init+0x2b0>)
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	4313      	orrs	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]
 80088a2:	e006      	b.n	80088b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80088a4:	4b35      	ldr	r3, [pc, #212]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	43db      	mvns	r3, r3
 80088ac:	4933      	ldr	r1, [pc, #204]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80088be:	4b2f      	ldr	r3, [pc, #188]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	492e      	ldr	r1, [pc, #184]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	604b      	str	r3, [r1, #4]
 80088ca:	e006      	b.n	80088da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80088cc:	4b2b      	ldr	r3, [pc, #172]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	43db      	mvns	r3, r3
 80088d4:	4929      	ldr	r1, [pc, #164]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d006      	beq.n	80088f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80088e6:	4b25      	ldr	r3, [pc, #148]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	4924      	ldr	r1, [pc, #144]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	608b      	str	r3, [r1, #8]
 80088f2:	e006      	b.n	8008902 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80088f4:	4b21      	ldr	r3, [pc, #132]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	43db      	mvns	r3, r3
 80088fc:	491f      	ldr	r1, [pc, #124]	; (800897c <HAL_GPIO_Init+0x2b0>)
 80088fe:	4013      	ands	r3, r2
 8008900:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d006      	beq.n	800891c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800890e:	4b1b      	ldr	r3, [pc, #108]	; (800897c <HAL_GPIO_Init+0x2b0>)
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	491a      	ldr	r1, [pc, #104]	; (800897c <HAL_GPIO_Init+0x2b0>)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	4313      	orrs	r3, r2
 8008918:	60cb      	str	r3, [r1, #12]
 800891a:	e006      	b.n	800892a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800891c:	4b17      	ldr	r3, [pc, #92]	; (800897c <HAL_GPIO_Init+0x2b0>)
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	43db      	mvns	r3, r3
 8008924:	4915      	ldr	r1, [pc, #84]	; (800897c <HAL_GPIO_Init+0x2b0>)
 8008926:	4013      	ands	r3, r2
 8008928:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	3301      	adds	r3, #1
 800892e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	fa22 f303 	lsr.w	r3, r2, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	f47f aed0 	bne.w	80086e0 <HAL_GPIO_Init+0x14>
  }
}
 8008940:	bf00      	nop
 8008942:	372c      	adds	r7, #44	; 0x2c
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	10210000 	.word	0x10210000
 8008950:	10110000 	.word	0x10110000
 8008954:	10120000 	.word	0x10120000
 8008958:	10310000 	.word	0x10310000
 800895c:	10320000 	.word	0x10320000
 8008960:	10220000 	.word	0x10220000
 8008964:	40021000 	.word	0x40021000
 8008968:	40010000 	.word	0x40010000
 800896c:	40010800 	.word	0x40010800
 8008970:	40010c00 	.word	0x40010c00
 8008974:	40011000 	.word	0x40011000
 8008978:	40011400 	.word	0x40011400
 800897c:	40010400 	.word	0x40010400

08008980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	807b      	strh	r3, [r7, #2]
 800898c:	4613      	mov	r3, r2
 800898e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008990:	787b      	ldrb	r3, [r7, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008996:	887a      	ldrh	r2, [r7, #2]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800899c:	e003      	b.n	80089a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800899e:	887b      	ldrh	r3, [r7, #2]
 80089a0:	041a      	lsls	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089c2:	887a      	ldrh	r2, [r7, #2]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4013      	ands	r3, r2
 80089c8:	041a      	lsls	r2, r3, #16
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	43d9      	mvns	r1, r3
 80089ce:	887b      	ldrh	r3, [r7, #2]
 80089d0:	400b      	ands	r3, r1
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	611a      	str	r2, [r3, #16]
}
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
	...

080089e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e26c      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8087 	beq.w	8008b12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a04:	4b92      	ldr	r3, [pc, #584]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f003 030c 	and.w	r3, r3, #12
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d00c      	beq.n	8008a2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a10:	4b8f      	ldr	r3, [pc, #572]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f003 030c 	and.w	r3, r3, #12
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d112      	bne.n	8008a42 <HAL_RCC_OscConfig+0x5e>
 8008a1c:	4b8c      	ldr	r3, [pc, #560]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a28:	d10b      	bne.n	8008a42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a2a:	4b89      	ldr	r3, [pc, #548]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d06c      	beq.n	8008b10 <HAL_RCC_OscConfig+0x12c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d168      	bne.n	8008b10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e246      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a4a:	d106      	bne.n	8008a5a <HAL_RCC_OscConfig+0x76>
 8008a4c:	4b80      	ldr	r3, [pc, #512]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a7f      	ldr	r2, [pc, #508]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e02e      	b.n	8008ab8 <HAL_RCC_OscConfig+0xd4>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10c      	bne.n	8008a7c <HAL_RCC_OscConfig+0x98>
 8008a62:	4b7b      	ldr	r3, [pc, #492]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a7a      	ldr	r2, [pc, #488]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4b78      	ldr	r3, [pc, #480]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a77      	ldr	r2, [pc, #476]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e01d      	b.n	8008ab8 <HAL_RCC_OscConfig+0xd4>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a84:	d10c      	bne.n	8008aa0 <HAL_RCC_OscConfig+0xbc>
 8008a86:	4b72      	ldr	r3, [pc, #456]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a71      	ldr	r2, [pc, #452]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4b6f      	ldr	r3, [pc, #444]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a6e      	ldr	r2, [pc, #440]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	e00b      	b.n	8008ab8 <HAL_RCC_OscConfig+0xd4>
 8008aa0:	4b6b      	ldr	r3, [pc, #428]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a6a      	ldr	r2, [pc, #424]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	4b68      	ldr	r3, [pc, #416]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a67      	ldr	r2, [pc, #412]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ab6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d013      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac0:	f7ff fcf4 	bl	80084ac <HAL_GetTick>
 8008ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ac6:	e008      	b.n	8008ada <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ac8:	f7ff fcf0 	bl	80084ac <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b64      	cmp	r3, #100	; 0x64
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e1fa      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ada:	4b5d      	ldr	r3, [pc, #372]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0f0      	beq.n	8008ac8 <HAL_RCC_OscConfig+0xe4>
 8008ae6:	e014      	b.n	8008b12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae8:	f7ff fce0 	bl	80084ac <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008af0:	f7ff fcdc 	bl	80084ac <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b64      	cmp	r3, #100	; 0x64
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e1e6      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b02:	4b53      	ldr	r3, [pc, #332]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f0      	bne.n	8008af0 <HAL_RCC_OscConfig+0x10c>
 8008b0e:	e000      	b.n	8008b12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d063      	beq.n	8008be6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b1e:	4b4c      	ldr	r3, [pc, #304]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f003 030c 	and.w	r3, r3, #12
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b2a:	4b49      	ldr	r3, [pc, #292]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f003 030c 	and.w	r3, r3, #12
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d11c      	bne.n	8008b70 <HAL_RCC_OscConfig+0x18c>
 8008b36:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b42:	4b43      	ldr	r3, [pc, #268]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d005      	beq.n	8008b5a <HAL_RCC_OscConfig+0x176>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d001      	beq.n	8008b5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e1ba      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b5a:	4b3d      	ldr	r3, [pc, #244]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4939      	ldr	r1, [pc, #228]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b6e:	e03a      	b.n	8008be6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d020      	beq.n	8008bba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b78:	4b36      	ldr	r3, [pc, #216]	; (8008c54 <HAL_RCC_OscConfig+0x270>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b7e:	f7ff fc95 	bl	80084ac <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b84:	e008      	b.n	8008b98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b86:	f7ff fc91 	bl	80084ac <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d901      	bls.n	8008b98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e19b      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b98:	4b2d      	ldr	r3, [pc, #180]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0f0      	beq.n	8008b86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ba4:	4b2a      	ldr	r3, [pc, #168]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4927      	ldr	r1, [pc, #156]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	600b      	str	r3, [r1, #0]
 8008bb8:	e015      	b.n	8008be6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bba:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <HAL_RCC_OscConfig+0x270>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc0:	f7ff fc74 	bl	80084ac <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bc8:	f7ff fc70 	bl	80084ac <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e17a      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bda:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d03a      	beq.n	8008c68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d019      	beq.n	8008c2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bfa:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <HAL_RCC_OscConfig+0x274>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c00:	f7ff fc54 	bl	80084ac <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c08:	f7ff fc50 	bl	80084ac <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e15a      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <HAL_RCC_OscConfig+0x26c>)
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f0      	beq.n	8008c08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c26:	2001      	movs	r0, #1
 8008c28:	f000 faa8 	bl	800917c <RCC_Delay>
 8008c2c:	e01c      	b.n	8008c68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <HAL_RCC_OscConfig+0x274>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c34:	f7ff fc3a 	bl	80084ac <HAL_GetTick>
 8008c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c3a:	e00f      	b.n	8008c5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c3c:	f7ff fc36 	bl	80084ac <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d908      	bls.n	8008c5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e140      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
 8008c4e:	bf00      	nop
 8008c50:	40021000 	.word	0x40021000
 8008c54:	42420000 	.word	0x42420000
 8008c58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c5c:	4b9e      	ldr	r3, [pc, #632]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e9      	bne.n	8008c3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80a6 	beq.w	8008dc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c7a:	4b97      	ldr	r3, [pc, #604]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10d      	bne.n	8008ca2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c86:	4b94      	ldr	r3, [pc, #592]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4a93      	ldr	r2, [pc, #588]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c90:	61d3      	str	r3, [r2, #28]
 8008c92:	4b91      	ldr	r3, [pc, #580]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9a:	60bb      	str	r3, [r7, #8]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ca2:	4b8e      	ldr	r3, [pc, #568]	; (8008edc <HAL_RCC_OscConfig+0x4f8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d118      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cae:	4b8b      	ldr	r3, [pc, #556]	; (8008edc <HAL_RCC_OscConfig+0x4f8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a8a      	ldr	r2, [pc, #552]	; (8008edc <HAL_RCC_OscConfig+0x4f8>)
 8008cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cba:	f7ff fbf7 	bl	80084ac <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cc2:	f7ff fbf3 	bl	80084ac <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b64      	cmp	r3, #100	; 0x64
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e0fd      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd4:	4b81      	ldr	r3, [pc, #516]	; (8008edc <HAL_RCC_OscConfig+0x4f8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0f0      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d106      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x312>
 8008ce8:	4b7b      	ldr	r3, [pc, #492]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	4a7a      	ldr	r2, [pc, #488]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	6213      	str	r3, [r2, #32]
 8008cf4:	e02d      	b.n	8008d52 <HAL_RCC_OscConfig+0x36e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10c      	bne.n	8008d18 <HAL_RCC_OscConfig+0x334>
 8008cfe:	4b76      	ldr	r3, [pc, #472]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	4a75      	ldr	r2, [pc, #468]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	6213      	str	r3, [r2, #32]
 8008d0a:	4b73      	ldr	r3, [pc, #460]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	4a72      	ldr	r2, [pc, #456]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d10:	f023 0304 	bic.w	r3, r3, #4
 8008d14:	6213      	str	r3, [r2, #32]
 8008d16:	e01c      	b.n	8008d52 <HAL_RCC_OscConfig+0x36e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	2b05      	cmp	r3, #5
 8008d1e:	d10c      	bne.n	8008d3a <HAL_RCC_OscConfig+0x356>
 8008d20:	4b6d      	ldr	r3, [pc, #436]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	4a6c      	ldr	r2, [pc, #432]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d26:	f043 0304 	orr.w	r3, r3, #4
 8008d2a:	6213      	str	r3, [r2, #32]
 8008d2c:	4b6a      	ldr	r3, [pc, #424]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	4a69      	ldr	r2, [pc, #420]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	6213      	str	r3, [r2, #32]
 8008d38:	e00b      	b.n	8008d52 <HAL_RCC_OscConfig+0x36e>
 8008d3a:	4b67      	ldr	r3, [pc, #412]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	4a66      	ldr	r2, [pc, #408]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	6213      	str	r3, [r2, #32]
 8008d46:	4b64      	ldr	r3, [pc, #400]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	4a63      	ldr	r2, [pc, #396]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d4c:	f023 0304 	bic.w	r3, r3, #4
 8008d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d015      	beq.n	8008d86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d5a:	f7ff fba7 	bl	80084ac <HAL_GetTick>
 8008d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d60:	e00a      	b.n	8008d78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d62:	f7ff fba3 	bl	80084ac <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e0ab      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d78:	4b57      	ldr	r3, [pc, #348]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0ee      	beq.n	8008d62 <HAL_RCC_OscConfig+0x37e>
 8008d84:	e014      	b.n	8008db0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d86:	f7ff fb91 	bl	80084ac <HAL_GetTick>
 8008d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d8c:	e00a      	b.n	8008da4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d8e:	f7ff fb8d 	bl	80084ac <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e095      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008da4:	4b4c      	ldr	r3, [pc, #304]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1ee      	bne.n	8008d8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d105      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008db6:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	4a47      	ldr	r2, [pc, #284]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 8081 	beq.w	8008ece <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dcc:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f003 030c 	and.w	r3, r3, #12
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d061      	beq.n	8008e9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d146      	bne.n	8008e6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008de0:	4b3f      	ldr	r3, [pc, #252]	; (8008ee0 <HAL_RCC_OscConfig+0x4fc>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de6:	f7ff fb61 	bl	80084ac <HAL_GetTick>
 8008dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dee:	f7ff fb5d 	bl	80084ac <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e067      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e00:	4b35      	ldr	r3, [pc, #212]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f0      	bne.n	8008dee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e14:	d108      	bne.n	8008e28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e16:	4b30      	ldr	r3, [pc, #192]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	492d      	ldr	r1, [pc, #180]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e28:	4b2b      	ldr	r3, [pc, #172]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a19      	ldr	r1, [r3, #32]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	4927      	ldr	r1, [pc, #156]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <HAL_RCC_OscConfig+0x4fc>)
 8008e42:	2201      	movs	r2, #1
 8008e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e46:	f7ff fb31 	bl	80084ac <HAL_GetTick>
 8008e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e4c:	e008      	b.n	8008e60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e4e:	f7ff fb2d 	bl	80084ac <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e037      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0f0      	beq.n	8008e4e <HAL_RCC_OscConfig+0x46a>
 8008e6c:	e02f      	b.n	8008ece <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_RCC_OscConfig+0x4fc>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e74:	f7ff fb1a 	bl	80084ac <HAL_GetTick>
 8008e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e7c:	f7ff fb16 	bl	80084ac <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e020      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x498>
 8008e9a:	e018      	b.n	8008ece <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e013      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <HAL_RCC_OscConfig+0x4f4>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d106      	bne.n	8008eca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d001      	beq.n	8008ece <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	40007000 	.word	0x40007000
 8008ee0:	42420060 	.word	0x42420060

08008ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e0d0      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ef8:	4b6a      	ldr	r3, [pc, #424]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d910      	bls.n	8008f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f06:	4b67      	ldr	r3, [pc, #412]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f023 0207 	bic.w	r2, r3, #7
 8008f0e:	4965      	ldr	r1, [pc, #404]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f16:	4b63      	ldr	r3, [pc, #396]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d001      	beq.n	8008f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b8      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d020      	beq.n	8008f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f40:	4b59      	ldr	r3, [pc, #356]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4a58      	ldr	r2, [pc, #352]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f58:	4b53      	ldr	r3, [pc, #332]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	4a52      	ldr	r2, [pc, #328]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f64:	4b50      	ldr	r3, [pc, #320]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	494d      	ldr	r1, [pc, #308]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d040      	beq.n	8009004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d107      	bne.n	8008f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	4b47      	ldr	r3, [pc, #284]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d115      	bne.n	8008fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e07f      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d107      	bne.n	8008fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fa2:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e073      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb2:	4b3d      	ldr	r3, [pc, #244]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e06b      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fc2:	4b39      	ldr	r3, [pc, #228]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f023 0203 	bic.w	r2, r3, #3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	4936      	ldr	r1, [pc, #216]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fd4:	f7ff fa6a 	bl	80084ac <HAL_GetTick>
 8008fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fda:	e00a      	b.n	8008ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fdc:	f7ff fa66 	bl	80084ac <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d901      	bls.n	8008ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e053      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ff2:	4b2d      	ldr	r3, [pc, #180]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f003 020c 	and.w	r2, r3, #12
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	429a      	cmp	r2, r3
 8009002:	d1eb      	bne.n	8008fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009004:	4b27      	ldr	r3, [pc, #156]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d210      	bcs.n	8009034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009012:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f023 0207 	bic.w	r2, r3, #7
 800901a:	4922      	ldr	r1, [pc, #136]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	4313      	orrs	r3, r2
 8009020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009022:	4b20      	ldr	r3, [pc, #128]	; (80090a4 <HAL_RCC_ClockConfig+0x1c0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d001      	beq.n	8009034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e032      	b.n	800909a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d008      	beq.n	8009052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009040:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4916      	ldr	r1, [pc, #88]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 800904e:	4313      	orrs	r3, r2
 8009050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800905e:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	490e      	ldr	r1, [pc, #56]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 800906e:	4313      	orrs	r3, r2
 8009070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009072:	f000 f821 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 8009076:	4601      	mov	r1, r0
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_RCC_ClockConfig+0x1c4>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	091b      	lsrs	r3, r3, #4
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <HAL_RCC_ClockConfig+0x1c8>)
 8009084:	5cd3      	ldrb	r3, [r2, r3]
 8009086:	fa21 f303 	lsr.w	r3, r1, r3
 800908a:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <HAL_RCC_ClockConfig+0x1cc>)
 800908c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <HAL_RCC_ClockConfig+0x1d0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff f9c8 	bl	8008428 <HAL_InitTick>

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40022000 	.word	0x40022000
 80090a8:	40021000 	.word	0x40021000
 80090ac:	0800923c 	.word	0x0800923c
 80090b0:	20000000 	.word	0x20000000
 80090b4:	20000004 	.word	0x20000004

080090b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b8:	b490      	push	{r4, r7}
 80090ba:	b08a      	sub	sp, #40	; 0x28
 80090bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090be:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <HAL_RCC_GetSysClockFreq+0xb0>)
 80090c0:	1d3c      	adds	r4, r7, #4
 80090c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <HAL_RCC_GetSysClockFreq+0xb4>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
 80090d2:	2300      	movs	r3, #0
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	2300      	movs	r3, #0
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80090e2:	4b23      	ldr	r3, [pc, #140]	; (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f003 030c 	and.w	r3, r3, #12
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d002      	beq.n	80090f8 <HAL_RCC_GetSysClockFreq+0x40>
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d003      	beq.n	80090fe <HAL_RCC_GetSysClockFreq+0x46>
 80090f6:	e02d      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80090f8:	4b1e      	ldr	r3, [pc, #120]	; (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090fa:	623b      	str	r3, [r7, #32]
      break;
 80090fc:	e02d      	b.n	800915a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	0c9b      	lsrs	r3, r3, #18
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800910a:	4413      	add	r3, r2
 800910c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009110:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d013      	beq.n	8009144 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <HAL_RCC_GetSysClockFreq+0xb8>)
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	0c5b      	lsrs	r3, r3, #17
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800912a:	4413      	add	r3, r2
 800912c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009130:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	4a0f      	ldr	r2, [pc, #60]	; (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009136:	fb02 f203 	mul.w	r2, r2, r3
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
 8009142:	e004      	b.n	800914e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	4a0c      	ldr	r2, [pc, #48]	; (8009178 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009148:	fb02 f303 	mul.w	r3, r2, r3
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	623b      	str	r3, [r7, #32]
      break;
 8009152:	e002      	b.n	800915a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009154:	4b07      	ldr	r3, [pc, #28]	; (8009174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009156:	623b      	str	r3, [r7, #32]
      break;
 8009158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800915a:	6a3b      	ldr	r3, [r7, #32]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3728      	adds	r7, #40	; 0x28
 8009160:	46bd      	mov	sp, r7
 8009162:	bc90      	pop	{r4, r7}
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	08009228 	.word	0x08009228
 800916c:	08009238 	.word	0x08009238
 8009170:	40021000 	.word	0x40021000
 8009174:	007a1200 	.word	0x007a1200
 8009178:	003d0900 	.word	0x003d0900

0800917c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009184:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <RCC_Delay+0x34>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <RCC_Delay+0x38>)
 800918a:	fba2 2303 	umull	r2, r3, r2, r3
 800918e:	0a5b      	lsrs	r3, r3, #9
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009198:	bf00      	nop
  }
  while (Delay --);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1e5a      	subs	r2, r3, #1
 800919e:	60fa      	str	r2, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1f9      	bne.n	8009198 <RCC_Delay+0x1c>
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20000000 	.word	0x20000000
 80091b4:	10624dd3 	.word	0x10624dd3

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	2500      	movs	r5, #0
 80091bc:	4e0c      	ldr	r6, [pc, #48]	; (80091f0 <__libc_init_array+0x38>)
 80091be:	4c0d      	ldr	r4, [pc, #52]	; (80091f4 <__libc_init_array+0x3c>)
 80091c0:	1ba4      	subs	r4, r4, r6
 80091c2:	10a4      	asrs	r4, r4, #2
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	f000 f822 	bl	8009210 <_init>
 80091cc:	2500      	movs	r5, #0
 80091ce:	4e0a      	ldr	r6, [pc, #40]	; (80091f8 <__libc_init_array+0x40>)
 80091d0:	4c0a      	ldr	r4, [pc, #40]	; (80091fc <__libc_init_array+0x44>)
 80091d2:	1ba4      	subs	r4, r4, r6
 80091d4:	10a4      	asrs	r4, r4, #2
 80091d6:	42a5      	cmp	r5, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091e0:	4798      	blx	r3
 80091e2:	3501      	adds	r5, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091ea:	4798      	blx	r3
 80091ec:	3501      	adds	r5, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	0800924c 	.word	0x0800924c
 80091f4:	0800924c 	.word	0x0800924c
 80091f8:	0800924c 	.word	0x0800924c
 80091fc:	08009250 	.word	0x08009250

08009200 <memset>:
 8009200:	4603      	mov	r3, r0
 8009202:	4402      	add	r2, r0
 8009204:	4293      	cmp	r3, r2
 8009206:	d100      	bne.n	800920a <memset+0xa>
 8009208:	4770      	bx	lr
 800920a:	f803 1b01 	strb.w	r1, [r3], #1
 800920e:	e7f9      	b.n	8009204 <memset+0x4>

08009210 <_init>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr

0800921c <_fini>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr
